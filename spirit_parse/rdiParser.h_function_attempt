/*!  @file  rdiParser.h
     @brief object for parsing a VisualSonics .rdi file with Boost Spirit
     
     @author Matt McCormick <matt@mmmccormick.com>
     @date   Mon Jun 18 2007 
      
   */

#ifndef _rdiParser_h
#define _rdiParser_h

#include <sstream>
#include <string>

#include "boost/spirit/core.hpp"
#include "boost/spirit/actor/assign_actor.hpp"
#include "boost/spirit/utility/loops.hpp"
#include "boost/spirit/dynamic/stored_rule.hpp"

#include "mat.h"
#include "mex.h"

#include "BoostSpiritInputFile.h"
#include "rdiParserData.h"


    //! Define types of SPIRIT constructs
  namespace bs = boost::spirit;
  
  typedef char * iterator_t;
/* //to find the skip parser type
     #include <typeinfo>
     std::ostringstream err_msg (std::ostringstream::out);
     err_msg << "the typeid of bs::ch_p('\"') is: " << typeid(bs::ch_p('"')).name() << '\n';
     mexErrMsgTxt( err_msg.str().c_str() );*/
  typedef bs::chlit<char> skip_t;
  typedef bs::skip_parser_iteration_policy<skip_t> iter_policy_t;
  typedef bs::scanner_policies<iter_policy_t> scanner_policies_t;
  typedef bs::scanner<iterator_t, scanner_policies_t> scanner_t;
  /* all this is necessary because of 
     http://www.boost.org/libs/spirit/doc/faq.html
     http://www.boost.org/libs/spirit/doc/scanner.html
     http://www.boost.org/libs/spirit/doc/rule.html
     */
  typedef bs::rule<scanner_t> rule_t;
  typedef bs::stored_rule<scanner_t> stored_rule_t;
 

/*! @class rdiParser object for parsing a VisualSonics .rdi file with Boost Spirit */
class rdiParser
{
public:

  /*! constructor
     @param file_name filename (and path if needed) of the file to be parsed
  */
  rdiParser(std::string filename);
  //! destructor
  ~rdiParser();
  rdiParserData parse();
  
private:

  /*!
   * function for taking a parser adding rules so that it searches sequentially 
   * for the next line with the value of interest
   *
   * @param parser parser which the additional rules are going to be appended to
   * @param param_string string that identifies the parameter in the .rdi file
   * @param param_units string that gives the units in the .rdi file
   * @param value variable that will be assigned the value of interest
   */
  void step_through_until_find_next(stored_rule_t&, const char*, const char*, unsigned int  &);
  void step_through_until_find_next(stored_rule_t&, const char*, const char*, double	    &);
  void step_through_until_find_next(stored_rule_t&, const char*,	      double	    &);

  BoostSpiritInputFile its_input;
  rdiParserData its_rpd;
  
};

#endif //_rdiParser_h
