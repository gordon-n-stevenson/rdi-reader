// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "rdi.hxx"

// image_info_t
//

const image_info_t::Study_Name_type& image_info_t::
Study_Name () const
{
  return this->Study_Name_.get ();
}

image_info_t::Study_Name_type& image_info_t::
Study_Name ()
{
  return this->Study_Name_.get ();
}

void image_info_t::
Study_Name (const Study_Name_type& x)
{
  this->Study_Name_.set (x);
}

void image_info_t::
Study_Name (::std::auto_ptr< Study_Name_type > x)
{
  this->Study_Name_.set (x);
}

const image_info_t::Image_Id_type& image_info_t::
Image_Id () const
{
  return this->Image_Id_.get ();
}

image_info_t::Image_Id_type& image_info_t::
Image_Id ()
{
  return this->Image_Id_.get ();
}

void image_info_t::
Image_Id (const Image_Id_type& x)
{
  this->Image_Id_.set (x);
}

void image_info_t::
Image_Id (::std::auto_ptr< Image_Id_type > x)
{
  this->Image_Id_.set (x);
}

const image_info_t::Image_Label_type& image_info_t::
Image_Label () const
{
  return this->Image_Label_.get ();
}

image_info_t::Image_Label_type& image_info_t::
Image_Label ()
{
  return this->Image_Label_.get ();
}

void image_info_t::
Image_Label (const Image_Label_type& x)
{
  this->Image_Label_.set (x);
}

void image_info_t::
Image_Label (::std::auto_ptr< Image_Label_type > x)
{
  this->Image_Label_.set (x);
}

const image_info_t::Image_Frames_type& image_info_t::
Image_Frames () const
{
  return this->Image_Frames_.get ();
}

image_info_t::Image_Frames_type& image_info_t::
Image_Frames ()
{
  return this->Image_Frames_.get ();
}

void image_info_t::
Image_Frames (const Image_Frames_type& x)
{
  this->Image_Frames_.set (x);
}

const image_info_t::Image_Lines_type& image_info_t::
Image_Lines () const
{
  return this->Image_Lines_.get ();
}

image_info_t::Image_Lines_type& image_info_t::
Image_Lines ()
{
  return this->Image_Lines_.get ();
}

void image_info_t::
Image_Lines (const Image_Lines_type& x)
{
  this->Image_Lines_.set (x);
}

const image_info_t::Image_Acquisition_Per_Line_type& image_info_t::
Image_Acquisition_Per_Line () const
{
  return this->Image_Acquisition_Per_Line_.get ();
}

image_info_t::Image_Acquisition_Per_Line_type& image_info_t::
Image_Acquisition_Per_Line ()
{
  return this->Image_Acquisition_Per_Line_.get ();
}

void image_info_t::
Image_Acquisition_Per_Line (const Image_Acquisition_Per_Line_type& x)
{
  this->Image_Acquisition_Per_Line_.set (x);
}

const image_info_t::Image_Acquisition_Size_type& image_info_t::
Image_Acquisition_Size () const
{
  return this->Image_Acquisition_Size_.get ();
}

image_info_t::Image_Acquisition_Size_type& image_info_t::
Image_Acquisition_Size ()
{
  return this->Image_Acquisition_Size_.get ();
}

void image_info_t::
Image_Acquisition_Size (const Image_Acquisition_Size_type& x)
{
  this->Image_Acquisition_Size_.set (x);
}

const image_info_t::Animal_ID_type& image_info_t::
Animal_ID () const
{
  return this->Animal_ID_.get ();
}

image_info_t::Animal_ID_type& image_info_t::
Animal_ID ()
{
  return this->Animal_ID_.get ();
}

void image_info_t::
Animal_ID (const Animal_ID_type& x)
{
  this->Animal_ID_.set (x);
}

void image_info_t::
Animal_ID (::std::auto_ptr< Animal_ID_type > x)
{
  this->Animal_ID_.set (x);
}

const image_info_t::Acquisition_Mode_type& image_info_t::
Acquisition_Mode () const
{
  return this->Acquisition_Mode_.get ();
}

image_info_t::Acquisition_Mode_type& image_info_t::
Acquisition_Mode ()
{
  return this->Acquisition_Mode_.get ();
}

void image_info_t::
Acquisition_Mode (const Acquisition_Mode_type& x)
{
  this->Acquisition_Mode_.set (x);
}

void image_info_t::
Acquisition_Mode (::std::auto_ptr< Acquisition_Mode_type > x)
{
  this->Acquisition_Mode_.set (x);
}

const image_info_t::Acquisition_Date_type& image_info_t::
Acquisition_Date () const
{
  return this->Acquisition_Date_.get ();
}

image_info_t::Acquisition_Date_type& image_info_t::
Acquisition_Date ()
{
  return this->Acquisition_Date_.get ();
}

void image_info_t::
Acquisition_Date (const Acquisition_Date_type& x)
{
  this->Acquisition_Date_.set (x);
}

void image_info_t::
Acquisition_Date (::std::auto_ptr< Acquisition_Date_type > x)
{
  this->Acquisition_Date_.set (x);
}

const image_info_t::Acquisition_Time_type& image_info_t::
Acquisition_Time () const
{
  return this->Acquisition_Time_.get ();
}

image_info_t::Acquisition_Time_type& image_info_t::
Acquisition_Time ()
{
  return this->Acquisition_Time_.get ();
}

void image_info_t::
Acquisition_Time (const Acquisition_Time_type& x)
{
  this->Acquisition_Time_.set (x);
}

void image_info_t::
Acquisition_Time (::std::auto_ptr< Acquisition_Time_type > x)
{
  this->Acquisition_Time_.set (x);
}

const image_info_t::Acquisition_Operator_type& image_info_t::
Acquisition_Operator () const
{
  return this->Acquisition_Operator_.get ();
}

image_info_t::Acquisition_Operator_type& image_info_t::
Acquisition_Operator ()
{
  return this->Acquisition_Operator_.get ();
}

void image_info_t::
Acquisition_Operator (const Acquisition_Operator_type& x)
{
  this->Acquisition_Operator_.set (x);
}

void image_info_t::
Acquisition_Operator (::std::auto_ptr< Acquisition_Operator_type > x)
{
  this->Acquisition_Operator_.set (x);
}


// image_data_t
//


// image_parameters_t
//


// rdi_t
//

const rdi_t::image_info_type& rdi_t::
image_info () const
{
  return this->image_info_.get ();
}

rdi_t::image_info_type& rdi_t::
image_info ()
{
  return this->image_info_.get ();
}

void rdi_t::
image_info (const image_info_type& x)
{
  this->image_info_.set (x);
}

void rdi_t::
image_info (::std::auto_ptr< image_info_type > x)
{
  this->image_info_.set (x);
}

const rdi_t::image_data_type& rdi_t::
image_data () const
{
  return this->image_data_.get ();
}

rdi_t::image_data_type& rdi_t::
image_data ()
{
  return this->image_data_.get ();
}

void rdi_t::
image_data (const image_data_type& x)
{
  this->image_data_.set (x);
}

void rdi_t::
image_data (::std::auto_ptr< image_data_type > x)
{
  this->image_data_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// image_info_t
//

image_info_t::
image_info_t (const Study_Name_type& Study_Name,
              const Image_Id_type& Image_Id,
              const Image_Label_type& Image_Label,
              const Image_Frames_type& Image_Frames,
              const Image_Lines_type& Image_Lines,
              const Image_Acquisition_Per_Line_type& Image_Acquisition_Per_Line,
              const Image_Acquisition_Size_type& Image_Acquisition_Size,
              const Animal_ID_type& Animal_ID,
              const Acquisition_Mode_type& Acquisition_Mode,
              const Acquisition_Date_type& Acquisition_Date,
              const Acquisition_Time_type& Acquisition_Time,
              const Acquisition_Operator_type& Acquisition_Operator)
: ::xml_schema::type (),
  Study_Name_ (Study_Name, ::xml_schema::flags (), this),
  Image_Id_ (Image_Id, ::xml_schema::flags (), this),
  Image_Label_ (Image_Label, ::xml_schema::flags (), this),
  Image_Frames_ (Image_Frames, ::xml_schema::flags (), this),
  Image_Lines_ (Image_Lines, ::xml_schema::flags (), this),
  Image_Acquisition_Per_Line_ (Image_Acquisition_Per_Line, ::xml_schema::flags (), this),
  Image_Acquisition_Size_ (Image_Acquisition_Size, ::xml_schema::flags (), this),
  Animal_ID_ (Animal_ID, ::xml_schema::flags (), this),
  Acquisition_Mode_ (Acquisition_Mode, ::xml_schema::flags (), this),
  Acquisition_Date_ (Acquisition_Date, ::xml_schema::flags (), this),
  Acquisition_Time_ (Acquisition_Time, ::xml_schema::flags (), this),
  Acquisition_Operator_ (Acquisition_Operator, ::xml_schema::flags (), this)
{
}

image_info_t::
image_info_t (const image_info_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Study_Name_ (x.Study_Name_, f, this),
  Image_Id_ (x.Image_Id_, f, this),
  Image_Label_ (x.Image_Label_, f, this),
  Image_Frames_ (x.Image_Frames_, f, this),
  Image_Lines_ (x.Image_Lines_, f, this),
  Image_Acquisition_Per_Line_ (x.Image_Acquisition_Per_Line_, f, this),
  Image_Acquisition_Size_ (x.Image_Acquisition_Size_, f, this),
  Animal_ID_ (x.Animal_ID_, f, this),
  Acquisition_Mode_ (x.Acquisition_Mode_, f, this),
  Acquisition_Date_ (x.Acquisition_Date_, f, this),
  Acquisition_Time_ (x.Acquisition_Time_, f, this),
  Acquisition_Operator_ (x.Acquisition_Operator_, f, this)
{
}

image_info_t::
image_info_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Study_Name_ (f, this),
  Image_Id_ (f, this),
  Image_Label_ (f, this),
  Image_Frames_ (f, this),
  Image_Lines_ (f, this),
  Image_Acquisition_Per_Line_ (f, this),
  Image_Acquisition_Size_ (f, this),
  Animal_ID_ (f, this),
  Acquisition_Mode_ (f, this),
  Acquisition_Date_ (f, this),
  Acquisition_Time_ (f, this),
  Acquisition_Operator_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void image_info_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Study_Name
    //
    if (n.name () == "Study_Name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Study_Name_type > r (
        Study_Name_traits::create (i, f, this));

      if (!Study_Name_.present ())
      {
        this->Study_Name_.set (r);
        continue;
      }
    }

    // Image_Id
    //
    if (n.name () == "Image_Id" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Image_Id_type > r (
        Image_Id_traits::create (i, f, this));

      if (!Image_Id_.present ())
      {
        this->Image_Id_.set (r);
        continue;
      }
    }

    // Image_Label
    //
    if (n.name () == "Image_Label" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Image_Label_type > r (
        Image_Label_traits::create (i, f, this));

      if (!Image_Label_.present ())
      {
        this->Image_Label_.set (r);
        continue;
      }
    }

    // Image_Frames
    //
    if (n.name () == "Image_Frames" && n.namespace_ ().empty ())
    {
      if (!Image_Frames_.present ())
      {
        this->Image_Frames_.set (Image_Frames_traits::create (i, f, this));
        continue;
      }
    }

    // Image_Lines
    //
    if (n.name () == "Image_Lines" && n.namespace_ ().empty ())
    {
      if (!Image_Lines_.present ())
      {
        this->Image_Lines_.set (Image_Lines_traits::create (i, f, this));
        continue;
      }
    }

    // Image_Acquisition_Per_Line
    //
    if (n.name () == "Image_Acquisition_Per_Line" && n.namespace_ ().empty ())
    {
      if (!Image_Acquisition_Per_Line_.present ())
      {
        this->Image_Acquisition_Per_Line_.set (Image_Acquisition_Per_Line_traits::create (i, f, this));
        continue;
      }
    }

    // Image_Acquisition_Size
    //
    if (n.name () == "Image_Acquisition_Size" && n.namespace_ ().empty ())
    {
      if (!Image_Acquisition_Size_.present ())
      {
        this->Image_Acquisition_Size_.set (Image_Acquisition_Size_traits::create (i, f, this));
        continue;
      }
    }

    // Animal_ID
    //
    if (n.name () == "Animal_ID" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Animal_ID_type > r (
        Animal_ID_traits::create (i, f, this));

      if (!Animal_ID_.present ())
      {
        this->Animal_ID_.set (r);
        continue;
      }
    }

    // Acquisition_Mode
    //
    if (n.name () == "Acquisition_Mode" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Acquisition_Mode_type > r (
        Acquisition_Mode_traits::create (i, f, this));

      if (!Acquisition_Mode_.present ())
      {
        this->Acquisition_Mode_.set (r);
        continue;
      }
    }

    // Acquisition_Date
    //
    if (n.name () == "Acquisition_Date" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Acquisition_Date_type > r (
        Acquisition_Date_traits::create (i, f, this));

      if (!Acquisition_Date_.present ())
      {
        this->Acquisition_Date_.set (r);
        continue;
      }
    }

    // Acquisition_Time
    //
    if (n.name () == "Acquisition_Time" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Acquisition_Time_type > r (
        Acquisition_Time_traits::create (i, f, this));

      if (!Acquisition_Time_.present ())
      {
        this->Acquisition_Time_.set (r);
        continue;
      }
    }

    // Acquisition_Operator
    //
    if (n.name () == "Acquisition_Operator" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Acquisition_Operator_type > r (
        Acquisition_Operator_traits::create (i, f, this));

      if (!Acquisition_Operator_.present ())
      {
        this->Acquisition_Operator_.set (r);
        continue;
      }
    }

    break;
  }

  if (!Study_Name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Study_Name",
      "");
  }

  if (!Image_Id_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Image_Id",
      "");
  }

  if (!Image_Label_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Image_Label",
      "");
  }

  if (!Image_Frames_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Image_Frames",
      "");
  }

  if (!Image_Lines_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Image_Lines",
      "");
  }

  if (!Image_Acquisition_Per_Line_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Image_Acquisition_Per_Line",
      "");
  }

  if (!Image_Acquisition_Size_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Image_Acquisition_Size",
      "");
  }

  if (!Animal_ID_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Animal_ID",
      "");
  }

  if (!Acquisition_Mode_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Acquisition_Mode",
      "");
  }

  if (!Acquisition_Date_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Acquisition_Date",
      "");
  }

  if (!Acquisition_Time_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Acquisition_Time",
      "");
  }

  if (!Acquisition_Operator_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Acquisition_Operator",
      "");
  }
}

image_info_t* image_info_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class image_info_t (*this, f, c);
}

image_info_t::
~image_info_t ()
{
}

// image_data_t
//

image_data_t::
image_data_t ()
: ::xml_schema::type ()
{
}

image_data_t::
image_data_t (const image_data_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c)
{
}

image_data_t::
image_data_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f, c)
{
}

image_data_t::
image_data_t (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (a, f, c)
{
}

image_data_t::
image_data_t (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (s, e, f, c)
{
}

image_data_t* image_data_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class image_data_t (*this, f, c);
}

image_data_t::
~image_data_t ()
{
}

// image_parameters_t
//

image_parameters_t::
image_parameters_t ()
: ::xml_schema::type ()
{
}

image_parameters_t::
image_parameters_t (const image_parameters_t& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::type (x, f, c)
{
}

image_parameters_t::
image_parameters_t (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::type (e, f, c)
{
}

image_parameters_t::
image_parameters_t (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::type (a, f, c)
{
}

image_parameters_t::
image_parameters_t (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::type (s, e, f, c)
{
}

image_parameters_t* image_parameters_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class image_parameters_t (*this, f, c);
}

image_parameters_t::
~image_parameters_t ()
{
}

// rdi_t
//

rdi_t::
rdi_t (const image_info_type& image_info,
       const image_data_type& image_data)
: ::xml_schema::type (),
  image_info_ (image_info, ::xml_schema::flags (), this),
  image_data_ (image_data, ::xml_schema::flags (), this)
{
}

rdi_t::
rdi_t (::std::auto_ptr< image_info_type >& image_info,
       const image_data_type& image_data)
: ::xml_schema::type (),
  image_info_ (image_info, ::xml_schema::flags (), this),
  image_data_ (image_data, ::xml_schema::flags (), this)
{
}

rdi_t::
rdi_t (const rdi_t& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  image_info_ (x.image_info_, f, this),
  image_data_ (x.image_data_, f, this)
{
}

rdi_t::
rdi_t (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  image_info_ (f, this),
  image_data_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void rdi_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // image_info
    //
    if (n.name () == "image_info" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< image_info_type > r (
        image_info_traits::create (i, f, this));

      if (!image_info_.present ())
      {
        this->image_info_.set (r);
        continue;
      }
    }

    // image_data
    //
    if (n.name () == "image_data" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< image_data_type > r (
        image_data_traits::create (i, f, this));

      if (!image_data_.present ())
      {
        this->image_data_.set (r);
        continue;
      }
    }

    break;
  }

  if (!image_info_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "image_info",
      "");
  }

  if (!image_data_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "image_data",
      "");
  }
}

rdi_t* rdi_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class rdi_t (*this, f, c);
}

rdi_t::
~rdi_t ()
{
}

#include <ostream>

::std::ostream&
operator<< (::std::ostream& o, const image_info_t& i)
{
  o << ::std::endl << "Study_Name: " << i.Study_Name ();
  o << ::std::endl << "Image_Id: " << i.Image_Id ();
  o << ::std::endl << "Image_Label: " << i.Image_Label ();
  o << ::std::endl << "Image_Frames: " << i.Image_Frames ();
  o << ::std::endl << "Image_Lines: " << i.Image_Lines ();
  o << ::std::endl << "Image_Acquisition_Per_Line: " << i.Image_Acquisition_Per_Line ();
  o << ::std::endl << "Image_Acquisition_Size: " << i.Image_Acquisition_Size ();
  o << ::std::endl << "Animal_ID: " << i.Animal_ID ();
  o << ::std::endl << "Acquisition_Mode: " << i.Acquisition_Mode ();
  o << ::std::endl << "Acquisition_Date: " << i.Acquisition_Date ();
  o << ::std::endl << "Acquisition_Time: " << i.Acquisition_Time ();
  o << ::std::endl << "Acquisition_Operator: " << i.Acquisition_Operator ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const image_data_t&)
{
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const image_parameters_t&)
{
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const rdi_t& i)
{
  o << ::std::endl << "image_info: " << i.image_info ();
  o << ::std::endl << "image_data: " << i.image_data ();
  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::rdi_t >
rdi (const ::std::string& u,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::rdi_t > r (
    ::rdi (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::rdi_t >
rdi (const ::std::string& u,
     ::xml_schema::error_handler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::rdi_t > r (
    ::rdi (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::rdi_t >
rdi (const ::std::string& u,
     ::xercesc::DOMErrorHandler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::rdi_t > r (
    ::rdi (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::rdi_t >
rdi (::std::istream& is,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::rdi (isrc, f, p);
}

::std::auto_ptr< ::rdi_t >
rdi (::std::istream& is,
     ::xml_schema::error_handler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::rdi (isrc, h, f, p);
}

::std::auto_ptr< ::rdi_t >
rdi (::std::istream& is,
     ::xercesc::DOMErrorHandler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::rdi (isrc, h, f, p);
}

::std::auto_ptr< ::rdi_t >
rdi (::std::istream& is,
     const ::std::string& sid,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::rdi (isrc, f, p);
}

::std::auto_ptr< ::rdi_t >
rdi (::std::istream& is,
     const ::std::string& sid,
     ::xml_schema::error_handler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::rdi (isrc, h, f, p);
}

::std::auto_ptr< ::rdi_t >
rdi (::std::istream& is,
     const ::std::string& sid,
     ::xercesc::DOMErrorHandler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::rdi (isrc, h, f, p);
}

::std::auto_ptr< ::rdi_t >
rdi (::xercesc::InputSource& i,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::rdi_t > r (
    ::rdi (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::rdi_t >
rdi (::xercesc::InputSource& i,
     ::xml_schema::error_handler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::rdi_t > r (
    ::rdi (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::rdi_t >
rdi (::xercesc::InputSource& i,
     ::xercesc::DOMErrorHandler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::rdi_t > r (
    ::rdi (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::rdi_t >
rdi (const ::xercesc::DOMDocument& d,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::rdi_t > r (
      ::rdi (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "rdi" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::rdi_t > r (
      ::xsd::cxx::tree::traits< ::rdi_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "rdi",
    "");
}

::std::auto_ptr< ::rdi_t >
rdi (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
     ::xml_schema::flags f,
     const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "rdi" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::rdi_t > r (
      ::xsd::cxx::tree::traits< ::rdi_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "rdi",
    "");
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

void
operator<< (::xercesc::DOMElement& e, const image_info_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // Study_Name
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Study_Name",
        e));

    s << i.Study_Name ();
  }

  // Image_Id
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Image_Id",
        e));

    s << i.Image_Id ();
  }

  // Image_Label
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Image_Label",
        e));

    s << i.Image_Label ();
  }

  // Image_Frames
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Image_Frames",
        e));

    s << i.Image_Frames ();
  }

  // Image_Lines
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Image_Lines",
        e));

    s << i.Image_Lines ();
  }

  // Image_Acquisition_Per_Line
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Image_Acquisition_Per_Line",
        e));

    s << i.Image_Acquisition_Per_Line ();
  }

  // Image_Acquisition_Size
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Image_Acquisition_Size",
        e));

    s << i.Image_Acquisition_Size ();
  }

  // Animal_ID
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Animal_ID",
        e));

    s << i.Animal_ID ();
  }

  // Acquisition_Mode
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Acquisition_Mode",
        e));

    s << i.Acquisition_Mode ();
  }

  // Acquisition_Date
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Acquisition_Date",
        e));

    s << i.Acquisition_Date ();
  }

  // Acquisition_Time
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Acquisition_Time",
        e));

    s << i.Acquisition_Time ();
  }

  // Acquisition_Operator
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Acquisition_Operator",
        e));

    s << i.Acquisition_Operator ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const image_data_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);
}

void
operator<< (::xercesc::DOMAttr&,const image_data_t&)
{
}

void
operator<< (::xml_schema::list_stream&,
            const image_data_t&)
{
}

void
operator<< (::xercesc::DOMElement& e, const image_parameters_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);
}

void
operator<< (::xercesc::DOMAttr&,const image_parameters_t&)
{
}

void
operator<< (::xml_schema::list_stream&,
            const image_parameters_t&)
{
}

void
operator<< (::xercesc::DOMElement& e, const rdi_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // image_info
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "image_info",
        e));

    s << i.image_info ();
  }

  // image_data
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "image_data",
        e));

    s << i.image_data ();
  }
}

void
rdi (::std::ostream& o,
     const ::rdi_t& s,
     const ::xml_schema::namespace_infomap& m,
     const ::std::string& e,
     ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::rdi (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
rdi (::std::ostream& o,
     const ::rdi_t& s,
     ::xml_schema::error_handler& h,
     const ::xml_schema::namespace_infomap& m,
     const ::std::string& e,
     ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::rdi (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
rdi (::std::ostream& o,
     const ::rdi_t& s,
     ::xercesc::DOMErrorHandler& h,
     const ::xml_schema::namespace_infomap& m,
     const ::std::string& e,
     ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::rdi (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
rdi (::xercesc::XMLFormatTarget& t,
     const ::rdi_t& s,
     const ::xml_schema::namespace_infomap& m,
     const ::std::string& e,
     ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::rdi (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
rdi (::xercesc::XMLFormatTarget& t,
     const ::rdi_t& s,
     ::xml_schema::error_handler& h,
     const ::xml_schema::namespace_infomap& m,
     const ::std::string& e,
     ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::rdi (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
rdi (::xercesc::XMLFormatTarget& t,
     const ::rdi_t& s,
     ::xercesc::DOMErrorHandler& h,
     const ::xml_schema::namespace_infomap& m,
     const ::std::string& e,
     ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::rdi (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
rdi (::xercesc::DOMDocument& d,
     const ::rdi_t& s,
     ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "rdi" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "rdi",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
rdi (const ::rdi_t& s,
     const ::xml_schema::namespace_infomap& m,
     ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "rdi",
      "",
      m, f));

  ::rdi (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

