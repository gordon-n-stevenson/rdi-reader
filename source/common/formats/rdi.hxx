// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_MATT_VS_READ_VISUALSONICS_DIGITAL_RF_SOURCE_COMMON_FORMATS_RDI_HXX
#define CXX_HOME_MATT_VS_READ_VISUALSONICS_DIGITAL_RF_SOURCE_COMMON_FORMATS_RDI_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info < char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream < char > list_stream;
  typedef ::xsd::cxx::tree::as_double < double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal < decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class image_info_t;

#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class image_info_t: public ::xml_schema::type
{
  public:
  // Study_Name
  //
  typedef ::xml_schema::string Study_Name_type;
  typedef ::xsd::cxx::tree::traits< Study_Name_type, char > Study_Name_traits;

  const Study_Name_type&
  Study_Name () const;

  Study_Name_type&
  Study_Name ();

  void
  Study_Name (const Study_Name_type& x);

  void
  Study_Name (::std::auto_ptr< Study_Name_type > p);

  // Image_Id
  //
  typedef ::xml_schema::string Image_Id_type;
  typedef ::xsd::cxx::tree::traits< Image_Id_type, char > Image_Id_traits;

  const Image_Id_type&
  Image_Id () const;

  Image_Id_type&
  Image_Id ();

  void
  Image_Id (const Image_Id_type& x);

  void
  Image_Id (::std::auto_ptr< Image_Id_type > p);

  // Image_Label
  //
  typedef ::xml_schema::string Image_Label_type;
  typedef ::xsd::cxx::tree::traits< Image_Label_type, char > Image_Label_traits;

  const Image_Label_type&
  Image_Label () const;

  Image_Label_type&
  Image_Label ();

  void
  Image_Label (const Image_Label_type& x);

  void
  Image_Label (::std::auto_ptr< Image_Label_type > p);

  // Image_Frames
  //
  typedef ::xml_schema::positive_integer Image_Frames_type;
  typedef ::xsd::cxx::tree::traits< Image_Frames_type, char > Image_Frames_traits;

  const Image_Frames_type&
  Image_Frames () const;

  Image_Frames_type&
  Image_Frames ();

  void
  Image_Frames (const Image_Frames_type& x);

  // Image_Lines
  //
  typedef ::xml_schema::positive_integer Image_Lines_type;
  typedef ::xsd::cxx::tree::traits< Image_Lines_type, char > Image_Lines_traits;

  const Image_Lines_type&
  Image_Lines () const;

  Image_Lines_type&
  Image_Lines ();

  void
  Image_Lines (const Image_Lines_type& x);

  // Image_Acquisition_Per_Line
  //
  typedef ::xml_schema::string Image_Acquisition_Per_Line_type;
  typedef ::xsd::cxx::tree::traits< Image_Acquisition_Per_Line_type, char > Image_Acquisition_Per_Line_traits;

  const Image_Acquisition_Per_Line_type&
  Image_Acquisition_Per_Line () const;

  Image_Acquisition_Per_Line_type&
  Image_Acquisition_Per_Line ();

  void
  Image_Acquisition_Per_Line (const Image_Acquisition_Per_Line_type& x);

  void
  Image_Acquisition_Per_Line (::std::auto_ptr< Image_Acquisition_Per_Line_type > p);

  // Image_Acquisition_Size
  //
  typedef ::xml_schema::positive_integer Image_Acquisition_Size_type;
  typedef ::xsd::cxx::tree::traits< Image_Acquisition_Size_type, char > Image_Acquisition_Size_traits;

  const Image_Acquisition_Size_type&
  Image_Acquisition_Size () const;

  Image_Acquisition_Size_type&
  Image_Acquisition_Size ();

  void
  Image_Acquisition_Size (const Image_Acquisition_Size_type& x);

  // Animal_ID
  //
  typedef ::xml_schema::string Animal_ID_type;
  typedef ::xsd::cxx::tree::traits< Animal_ID_type, char > Animal_ID_traits;

  const Animal_ID_type&
  Animal_ID () const;

  Animal_ID_type&
  Animal_ID ();

  void
  Animal_ID (const Animal_ID_type& x);

  void
  Animal_ID (::std::auto_ptr< Animal_ID_type > p);

  // Acquisition_Mode
  //
  typedef ::xml_schema::string Acquisition_Mode_type;
  typedef ::xsd::cxx::tree::traits< Acquisition_Mode_type, char > Acquisition_Mode_traits;

  const Acquisition_Mode_type&
  Acquisition_Mode () const;

  Acquisition_Mode_type&
  Acquisition_Mode ();

  void
  Acquisition_Mode (const Acquisition_Mode_type& x);

  void
  Acquisition_Mode (::std::auto_ptr< Acquisition_Mode_type > p);

  // Acquisition_Date
  //
  typedef ::xml_schema::string Acquisition_Date_type;
  typedef ::xsd::cxx::tree::traits< Acquisition_Date_type, char > Acquisition_Date_traits;

  const Acquisition_Date_type&
  Acquisition_Date () const;

  Acquisition_Date_type&
  Acquisition_Date ();

  void
  Acquisition_Date (const Acquisition_Date_type& x);

  void
  Acquisition_Date (::std::auto_ptr< Acquisition_Date_type > p);

  // Acquisition_Time
  //
  typedef ::xml_schema::string Acquisition_Time_type;
  typedef ::xsd::cxx::tree::traits< Acquisition_Time_type, char > Acquisition_Time_traits;

  const Acquisition_Time_type&
  Acquisition_Time () const;

  Acquisition_Time_type&
  Acquisition_Time ();

  void
  Acquisition_Time (const Acquisition_Time_type& x);

  void
  Acquisition_Time (::std::auto_ptr< Acquisition_Time_type > p);

  // Acquisition_Operator
  //
  typedef ::xml_schema::string Acquisition_Operator_type;
  typedef ::xsd::cxx::tree::traits< Acquisition_Operator_type, char > Acquisition_Operator_traits;

  const Acquisition_Operator_type&
  Acquisition_Operator () const;

  Acquisition_Operator_type&
  Acquisition_Operator ();

  void
  Acquisition_Operator (const Acquisition_Operator_type& x);

  void
  Acquisition_Operator (::std::auto_ptr< Acquisition_Operator_type > p);

  // Constructors.
  //
  image_info_t (const Study_Name_type&,
                const Image_Id_type&,
                const Image_Label_type&,
                const Image_Frames_type&,
                const Image_Lines_type&,
                const Image_Acquisition_Per_Line_type&,
                const Image_Acquisition_Size_type&,
                const Animal_ID_type&,
                const Acquisition_Mode_type&,
                const Acquisition_Date_type&,
                const Acquisition_Time_type&,
                const Acquisition_Operator_type&);

  image_info_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  image_info_t (const image_info_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual image_info_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual
  ~image_info_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Study_Name_type > Study_Name_;
  ::xsd::cxx::tree::one< Image_Id_type > Image_Id_;
  ::xsd::cxx::tree::one< Image_Label_type > Image_Label_;
  ::xsd::cxx::tree::one< Image_Frames_type > Image_Frames_;
  ::xsd::cxx::tree::one< Image_Lines_type > Image_Lines_;
  ::xsd::cxx::tree::one< Image_Acquisition_Per_Line_type > Image_Acquisition_Per_Line_;
  ::xsd::cxx::tree::one< Image_Acquisition_Size_type > Image_Acquisition_Size_;
  ::xsd::cxx::tree::one< Animal_ID_type > Animal_ID_;
  ::xsd::cxx::tree::one< Acquisition_Mode_type > Acquisition_Mode_;
  ::xsd::cxx::tree::one< Acquisition_Date_type > Acquisition_Date_;
  ::xsd::cxx::tree::one< Acquisition_Time_type > Acquisition_Time_;
  ::xsd::cxx::tree::one< Acquisition_Operator_type > Acquisition_Operator_;
};

#include <iosfwd>

::std::ostream&
operator<< (::std::ostream&, const image_info_t&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::image_info_t >
image_info (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::image_info_t >
image_info (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::image_info_t >
image_info (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::image_info_t >
image_info (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::image_info_t >
image_info (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::image_info_t >
image_info (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::image_info_t >
image_info (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::image_info_t >
image_info (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::image_info_t >
image_info (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::image_info_t >
image_info (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::image_info_t >
image_info (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::image_info_t >
image_info (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::image_info_t >
image_info (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::image_info_t >
image_info (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const image_info_t&);

// Serialize to std::ostream.
//

void
image_info (::std::ostream& os,
            const ::image_info_t& x,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

void
image_info (::std::ostream& os,
            const ::image_info_t& x,
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

void
image_info (::std::ostream& os,
            const ::image_info_t& x,
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
image_info (::xercesc::XMLFormatTarget& ft,
            const ::image_info_t& x,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

void
image_info (::xercesc::XMLFormatTarget& ft,
            const ::image_info_t& x,
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

void
image_info (::xercesc::XMLFormatTarget& ft,
            const ::image_info_t& x,
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
image_info (::xercesc::DOMDocument& d,
            const ::image_info_t& x,
            ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
image_info (const ::image_info_t& x,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_MATT_VS_READ_VISUALSONICS_DIGITAL_RF_SOURCE_COMMON_FORMATS_RDI_HXX
